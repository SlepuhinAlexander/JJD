package ru.ifmo.jjd.lessons.l07inheritance;

abstract public class BattleUnit extends Unit implements CanAttack {
    /*
     * Для того чтобы указать, что класс - наследуется, необходимо после объявления класса указать ключевое слово
     * extends и указать класс, от которого данный класс наследуется.
     *
     * Unit - родительский класс, суперкласс
     * BattleUnit - дочерний класс, расширенный класс.
     * */

    /*
     * Множественное наследование классов через extends -- запрещено.
     * Наследование через extends -- всегда от одного класса.
     * */

    /*
     * Для того чтобы укзаать, что класс реализаует какой-то интерфейс, необходимо указать ключевое слово
     * `implements` и имя интерфейса который он должен реализовать
     *
     * То есть класс, имплементируя интерфейс, заключает контракт на реализацию интерфейса: класс обязан реализовать
     * Все методы, заявленные в интерфейсе.
     *
     * Имплементировать можно несколько интерфейсов через запятую. И тогда класс должен реализовывать все методы всех
     * объявленных интерфейсов
     * */

    /*
     * Промежуточное понятие между классами и интерфейсами - это абстрактные классы
     * Для этого объявление класса нужно предварить ключевым словом abstract
     *
     * Так же как интерфейс, объект абстрактного класса создать нельзя.
     * Плюс к этому, абстрактный класс может иметь как методы с реализацией, так и методы без реализации.
     *
     * Такой метод без реализации должен быть помечен ключевым словом abstract.
     * */

    protected int attackScore;

    public BattleUnit(int healthScore, int speed, int attackScore) {
        super(healthScore, speed); // вызов конструктора родительского класса
        /*
         * Ключевое слово super - это ссылка на родительский класс.
         * В данном случае вызывается конструктор родительского класса.
         * */
        /*
         * Вызов конструктора родительского класса заполнит переданными значениями свойства healthScore и speed
         * для класса BattleUnit
         * */
        setAttackScore(attackScore);
        /*
         * И затем заполнит свойство attackScore.
         * */
    }

    public int getAttackScore() {
        return attackScore;
    }

    public void setAttackScore(int attackScore) {
        this.attackScore = attackScore;
    }

    @Override
    public void runFromField() {
        System.out.println("Бежал с поля боя");
    }
}
