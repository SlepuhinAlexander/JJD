package lessons.lesson02;

import java.util.Arrays;
import java.util.Scanner;

public class LoopsDemo {
    /*
     * Цикл - это повторяющиеся однотипные действия, которые выполняются до тех пор пока истинно некоторое условие.
     * */

    public static void main(String[] args) {
        LoopsDemo demo = new LoopsDemo();
        demo.whileDemo();
        demo.doWhileDemo();
        demo.forDemo();
        demo.foreachDemo();
    }

    private void whileDemo() {
        /*
         * Цикл с предусловием.
         * Синтаксис:
         * while(условие) {
         *    тело цикла
         * }
         * код после цикла
         *
         * - Перед входом в цикл проверяется условие. Если условие истинно, выполняется тело цикла.
         * - После выполнения тела цикла (текущей итерации) выполнение программы возвращается назад к проверке условия.
         * - Если условие по-прежнему верно, то начинается следующая итерация цикла и тело цикла снова выполняется.
         * - Если условие ложно, то исполнение программы переходит к следующей строчке после цикла.
         * - Так продолжается до тех пор пока условие истинно.
         * Если условие всегда истинно (например, было истинным и не изменяется внутри тела цикла), то цикл будет
         * продолжаться бесконечно. Если условие изначально было ложным, тело цикла не выполнится ни разу.
         * После окончания выполнения цикла исполнение программы переходит к следующей строчке после цикла.
         *
         * Инструкция break; прерывает выполнение текущего цикла и исполнение программы переходит к следующей строчке
         * после цикла.
         * Инструкция continue; прерывает выполнение текущей итерации цикла и исполнение программы переходит к
         * очередной проверке условия (и следующей итерации цикла, если условие всё ещё верно).
         * */

        // Пользователь вводит целое число с клавиатуры. Необходимо вывести квадрат этого числа. Программа прерывает
        // работу, если пользователь ввёл ноль.
        Scanner scanner = new Scanner(System.in);
        int num;
        while (true) {
            System.out.print("Введите число: ");
            num = scanner.nextInt();
            if (num == 0) {
                System.out.println("Выход из программы");
                break;
            }
            System.out.println("Квадрат вашего числа равен " + num * num);
        }
    }

    private void doWhileDemo() {
        /*
         * Цикл с постусловием do .. while имеет похожий на цикл while синтаксис:
         * do {
         *      тело цикла.
         * } while (условие);
         * код после цикла
         *
         * Тело цикла в первый раз выполняется безусловно.
         * В последующие разы тело цикла выполняется только если условие истинно.
         *  - Перед входом в цикл условие не проверяется, тело цикла выполняется в любом случае.
         *  - После выполнения тела цикла (текущей итерации) проверяется условие.
         *  - Если условие истинно, то снова выполняется тело цикла.
         *  - Если условие ложно, то исполнение программы переходит к следующей строчке после цикла.
         *  - Так продолжается пока условие истинно.
         * После окончания выполнения цикла, исполнение программы переходит к следующей строчке после цикла.
         *
         * В отличие от цикла while() {} тело цикл do {} while () в любом случае выполнится как минимум один раз
         * */

        // Программа загадывает целое число в диапазоне от [1;9]. Пользователь должен угадать число.
        // Пользователь вводит число в консоль.
        // В зависимости от введённого числа, программа выводит в консоль следующее:
        //  - "Загаданное число больше"
        //  - "Загаданное число меньше"
        //  - "Вы угадали!" (программа завершает работу)
        //  - "Выход из программы" (программа завершает работу) -- если введён ноль.
        Scanner scanner = new Scanner(System.in);
        int puzzle = (int) (Math.random() * 9) + 1;
        int guess;
        System.out.println("Загадано число от 1 до 9. Попробуйте угадать.");
        do {
            System.out.print("Ваш вариант? ");
            guess = scanner.nextInt();
            if (guess == 0) {
                System.out.println("Выход из программы.");
                break;
            } else if (guess == puzzle) {
                System.out.println("Вы угадали!");
                break;
            } else if (guess < puzzle) {
                System.out.println("Загаданное число больше.");
            } else {
                System.out.println("Загаданное число меньше.");
            }
        } while (true);
    }

    private void forDemo() {
        /*
         * Цикл for удобно использовать когда заранее известно необходимое количество итераций цикла.
         * Синтаксис:
         * for([инициализация];[условие];[шаг]) {
         *     тело цикла
         * }
         *
         * Каждый из трёх блоков [инициализация], [условие], [шаг] является необязательным.
         *  - [инициализация] исполняется только один раз при входе в цикл. Обычно здесь инициализируются начальные
         *    значения для переменных цикла (счётчиков). Также наиболее часто переменные цикла здесь же и объявляют.
         *  - [условие] проверяется при входе в цикл и перед каждой его следующей итерацией.
         *    Если условие истинно, то выполняется тело цикла (итерация)
         *    Если условие ложно, цикл заканчивает работу и исполнение переходит к строке следующей за циклом.
         *    Если условие не задано, считается что оно истинно.
         *    Условие может содержать несколько выражений (проверку нескольких переменных).
         *  - [шаг] цикла выполняется каждый раз после окончания выполнения тела цикла (итерации), но перед проверкой
         *    условия. Обычно в шаге цикла обновляются переменные цикла (счётчики).
         * */

        // Вывести в консоль все чётные натуральные двузначные числа.
        for (int i = 10; i < 100; i++) {
            if (i % 2 == 0) System.out.print(i + " ");
        }
        System.out.println();
        // альтернативное решение:
        for (int i = 10; i < 100; i++) {
            if (i % 2 != 0) continue;
            System.out.print(i + " ");
        }
        System.out.println();
    }

    private void foreachDemo() {
        /*
         * Цикл foreach появился в Java 5. Он является иной формой записи цикла for для случаев, когда в цикле
         * перебираются все эдементы из какого-либо перечислимого набора.
         * Наиболее часто таким набором является массив или коллекция.
         * (более подробно массивы разбираются позже).
         * Синтаксис:
         * for (ТипДанных элемент : набор) {
         *     тело цикла
         * }
         * где:
         *  - набор -- имя переменной, в которой хранится перебираемый набор.
         *  - ТипДанных -- какой тип данных хранится в перебираемом наборе.
         *  - элемент -- имя локальной переменной, в которую копируется значение текущего элемента из перебираемого
         *    набора.
         *
         * Цикл foreach последовательно перебирает все элементы из набора и каждый раз выполняет тело цикла.
         * Проверки условий в данном цикле нет.
         * В отличие от других циклов, где есть прямой доступ к данным, в цикле foreach элемент набора, над которым
         * ведётся работа в текущей итерации цикла, является КОПИЕЙ значения из перебираемого набора. Любые действия
         * с локальной переменной элемент никак не отразятся на перебираемом наборе
         * */

        // Дан массив целых чисел. Вывести в консоль квадраты каждого из элементов массива. Сам массив не изменять.
        int[] nums = new int[(int) (Math.random() * 5) + 5]; // масссив целых чисел длиной от 5 до 9.
        for (int i = 0; i < nums.length; i++) {
            nums[i] = (int) (Math.random() * 100); // заполняем массив произвольными числами
        }
        System.out.println("Исходный массив: " + Arrays.toString(nums)); // выводим содержимое массива
        System.out.print("Квадраты элементов массива: [");
        for (int n : nums) {
            System.out.print(n * n + " ");
        }
        System.out.println("]");
        System.out.println("Массив после выполнения цикла: " + Arrays.toString(nums)); // проверяем, что массив не
        // изменился
    }
}
