package lessons.lesson01;

public class OperatorsDemo {
    public static void main(String[] args) {
        OperatorsDemo demo = new OperatorsDemo();
        demo.mathOperatorsDemo();
        demo.comparisonOperatorsDemo();
        demo.assignmentOperatorsDemo();
        demo.logicalOperatorsDemo();
        demo.ternaryOperatorDemo();
    }

    private void mathOperatorsDemo() {
        /*
         * Бинарные арифметические операторы (действуют с двумя операндами):
         * + сложение
         * - вычитание
         * * умножение
         * / деление (для целых чисел - деление нацело (остаток отбрасывается))
         * % взятие остатка от деления
         * */
        int a = 17, b = 7;
        System.out.println(a + " + " + b + " = " + (a + b)); // 17 + 7 = 24
        System.out.println(a + " - " + b + " = " + (a - b)); // 17 - 7 = 10
        System.out.println(a + " * " + b + " = " + (a * b)); // 17 * 7 = 119
        System.out.println(a + " / " + b + " = " + (a / b)); // 17 / 7 = 2
        System.out.println(a + " % " + b + " = " + (a % b)); // 17 % 7 = 3
        // чтобы результат операции был числом с плавающей точкой, нужно чтобы
        // либо хотя бы один из операднов был числом с плавающей точкой
        // либо результат операции явно привести к нужному типу. Например:
        System.out.println(a + " / (float)" + b + " = " + (a / (float) b)); // 17 / (float)7 = 2.4285715
        System.out.println("(double)(" + a + " / " + b + " = " + (double) (a / b) + ")"); // (double)(17 / 7 = 2.0)
        // во втором случае сначала произведено целочисленное деление, а затем результат приведён к double

        /*
         * Унарные арифметическе операции
         * i++ инкремент (постфиксная форма)
         *     сначала возвращает текущее значение i, а затем присваивает i значение на 1 больше.
         * ++i инкремент (префиксная форма)
         *     сначала присваивает i значение на 1 больше, а затем возвращает обновлённое значение i.
         * i-- декремент (постфиксная форма)
         *     сначала возвращает текущее значение i, а затем присваивает i значение на 1 меньше.
         * --i декремент (префиксная форма)
         *     сначала присваивает i значение на 1 меньше, а затем возвращает обновлённое значение i.
         * */
        a = 2;
        System.out.println(a++ - ++a + a++ + a++ + a); // 13
    }

    private void assignmentOperatorsDemo() {
        /*
         * Операторы присваивания
         * =  присваивание:
         *      a = 12; --- переменной a присвоено значение 12
         * += сложение с присваиванием:
         *      a += b; --- краткая форма записи a = a + b;
         * -= вычитание с присваиванием:
         *      a -= b; --- краткая форма записи a = a - b;
         * *= умножение с присваиванием:
         *      a *= b; --- краткая форма записи a = a * b;
         * /= деление с присваиванием:
         *      a /= b; --- краткая форма записи a = a / b;
         * %= деление по модулю с присваиванием:
         *      a %= b; --- краткая форма записи a = a % b;
         * */
        int a = 17, b = 7;
        System.out.println("a = " + a + ", b = " + b); // a = 17, b = 7
        a -= b;
        System.out.println("a -= b : a = " + a); // a -= b : a = 10
        a += b;
        System.out.println("a += b : a = " + a); // a += b : a = 17
        a /= b;
        System.out.println("a /= b : a = " + a); // a /= b : a = 2
        a *= b;
        System.out.println("a *= b : a = " + a); // a *= b : a = 14
        a %= b;
        System.out.println("a %= b : a = " + a); // a %= b : a = 0
    }

    private void comparisonOperatorsDemo() {
        /*
         * В операциях сравнения сравниваются два операнда и возвращается значения типа boolean:
         *  - true, если выражение верно;
         *  - false, если выражение не верно.
         *
         * >  больше (строгое неравенство)
         * <  меньше (строгое неравенство)
         * == равно
         * != не равно
         * >= больше либо равно (нестрогое неравенство)
         * <= меньше либо равно (нестрогое неравенство)
         * */
        System.out.println("8 > 10 : " + (8 > 10)); // 8 > 10 : false
        System.out.println("8 >= 8 : " + (8 >= 8)); // 8 >= 8 : true
        System.out.println("8 != 0 : " + (6 != 0)); // 6 != 0 : true
        System.out.println("15 == 10 + 5 : " + (15 == 10 + 5)); // 15 == 10 + 5 : true
    }

    private void logicalOperatorsDemo() {
        /*
         * Логические операторы
         * Применяются к значениями типа boolean (или переменным / выражениям, принимающим значения boolean)
         * В результате так же возвращают значение типа boolean
         * && "ленивое" пересечение; логическое И.
         *      a && b --- возвращает true, если оба операнда истинны; возвращает false в ином случае.
         *      если a ложно, b не вычисляется
         * &  пересечение; логическое И.
         *      a & b  --- возвращает true, если оба операнда истинны; возвращает false в ином случае.
         *      оба операнда вычисляются в любом случае
         * || "ленивое" объединение; логическое ИЛИ.
         *      a || b --- возвращает true, если хотя бы один из операднов истинен;
         *                 возвращает false если оба операнда ложны
         *      если a истинно, b не вычисляется
         * |  объединение; логическое ИЛИ.
         *      a | b  --- возвращает true, если хотя бы один из операндов истинен;
         *                 возвращает false если оба операнда ложны
         * !  отрицание; логическое НЕ. Применяется к одному операнду.
         *      !a     --- возвращает true, если a ложно; возвращает false, если a истинно.
         * ^  логическое ИСКЛЮЧАЮЩЕЕ ИЛИ; XOR.
         *      a ^ b  --- возвращает true, если строго один из операндов истинен, а второй ложен;
         *                 возвращает false, если оба операнда истинны;
         *                 возвращает false, если оба операнда ложны.
         * */
        boolean a = true, b = false;
        System.out.println(a + " && " + b + " = " + (a && b)); // true && false = false
        System.out.println(a + " && " + a + " = " + (a && a)); // true && true = true
        System.out.println(a + " || " + b + " = " + (a || b)); // true || false = true
        System.out.println(b + " || " + b + " = " + (b || b)); // false || false = false
        System.out.println(a + " ^ " + b + " = " + (a ^ b)); // true ^ false = true
        System.out.println("!" + a + " = " + !a); // !true = false
    }

    private void ternaryOperatorDemo() {
        /*
         * Тренарный (условный) оператор.
         * Использует три операнда. Использует синтаксис:
         * переменная = (условие) ? выражение1 : выражение2;
         *  - условие должно принимать значение типа boolean;
         *  - оба выражения должны принимать значение совместимых типов, и совместимого типа с типом переменной
         *  - выражение1 вычисляется и присваивается переменной, если условие истинно;
         *  - выражение2 вычисляется и присваивается переменной, если условие ложно.
         * фактически, запись
         *      переменная = (условие) ? выражение1 : выражение2;
         * является краткой формой записи блока кода
         *      if (условие) {
         *          переменная = выражение1;
         *      } else {
         *          переменная = выражение2;
         *      }
         * */

        int a = 2, b = 3, c;
        c = (a < b) ? a + b : a - b;
        System.out.println("c = " + c); // c = 5

        /*
         * Еана переменная типа int.
         * Если переменная нечётная - умножить её значение на 2; если чётная - поделить на два.
         * Результат вывести в консоль.
         * */
        int n = (int) (Math.random() * 100);
        int result = (n % 2 == 0) ? n = 2 : n * 2;
        System.out.println("n = " + n + "; result = " + result); // n = 5; result = 10
    }
}
