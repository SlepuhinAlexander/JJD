package lessons.lesson06;

public class Author {
    private String name;
    /*
     * Для того чтобы ограничить прямой доступ к свойствам класса; чтобы выполнять какие-то проверки перед
     * записью значения в свойство, в описании этого класса необходимо использовать модификаторы доступа.
     * Если в классе Author указать модификатор досупа private перед свойством name, то доступ к этому свойству
     * доступен только в пределах этого класса. Из других классов он будет не виден.
     * */

    /*
     * Если задали модификатор private, но нужно использовать свойство и вне класса, то необходимо организовать иной
     * способ обращения к свойству. Это осуществляется двумя методами: геттерами и сеттерами.
     * Сеттер - это метод, устанавливающий значение свойства.
     * Геттер - это метод, считывающий значение свойства.
     * */
    private String surname;

    // метод сеттер
    public void setName(String name) {
        if (name.length() >= 2) {   // добавим проверку, что имя длиннее двух символов
            this.name = name;       // ещё может встретиться проверка: !"".equals(name) -- проверка на непустоту
        }                           // name != null  -- проверка на не нулл
        // к слову, о проверках на совпадение значения строки с литералом. Безопаснее
        // сначала указать литерал, а паременную указать аргументом в equals
        // т.к. переменная может быть и null.
        // "java".equals(someVar)

        /*
         * this - это ссылка на текущий объект.
         * текущий объект - это тот объект, который вызывает метод.
         *
         * конкретно здесь this используется для разрешения конфликта имён аргумента и свойства класса.
         * */
    }
    /*
     * Описание метода состоит из:
     * - модификатора доступа. Здесь, public - это модификатор доступа, который означает, что к данному методу можно
     *   обращаться из любого контекста (из любого класса / любого пакета)
     * - типа данных, которые метод возвращает. Здесь, void - означает, что метод не возвращает ничего.
     * - имя метода. в camelCase.
     * - список аргументов метода. Может быть пустой. Состоит из пар тип данных аргумента и имя аргумента.
     *      имя метода и список аргументов вместе называются сигнатурой метода. Сигнатура метода в пределах класса
     *      должна быть уникальна
     * - тело метода: код, который выполняется во время выоплнения метода.
     * */

    // метод геттер
    public String getName() {
        return name;
    }
    /*
     * Метод геттер возвращает значение свойства.
     *
     * Ключевое слово return указывает какое значение должен вернуть метод в результате своей работы.
     * Также инструкция с return прекращает выполнение метода. Никакой код код после return выполняться не будет.
     *
     * Возвращаемое значение в return должно быть совместимо с указанным типом возвращаемого значения.
     * Если метод ничего не возвращает, то указывается тип значения void.
     *
     * Также инструкция return может использоваться для досрочного прерывания выполнения метода, если выполнено
     * какое-то условие.
     * В методах с типом возвращаемого значения void инструкцию return необходимо использовать без какого-либо значения.
     * */

    public String getSurname() {
        return surname;
    }

    public void setSurname(String surname) {
        this.surname = surname;
    }

    @Override
    public String toString() {
        return "Author{" +
                "name='" + name + '\'' +
                ", surname='" + surname + '\'' +
                '}';
    }
}
